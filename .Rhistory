dat<-read.csv('activity.csv')
setwd('~/Documents/RepData_PeerAssessment1/')
dat<-read.csv('activity.csv')
dat<-read.csv('activity.csv')
dat<-read.csv('activity.csv')
dat<-read.csv('activity.csv')
dat<-read.csv('activity.csv')
dat<-read.csv('activity.csv')
## What is mean total number of steps taken per day?
## What is mean total number of steps taken per day?
## What is mean total number of steps taken per day?
## What is mean total number of steps taken per day?
## What is mean total number of steps taken per day?
stepsperday<-sapply(split(dat$steps,dat$date),sum)
hist(stepsperday)
mean(stepsperday[!is.na(stepsperday)])
median(stepsperday[!is.na(stepsperday)])
stepsperday<-sapply(split(dat$steps,dat$interval),sum)
meandailysteps<-sapply(split(dat$steps,dat$interval),sum)
meandailysteps
str(dat)
levels(dat$date)
levels(dat$interval)
a<-split(dat$steps,dat$inteval)
a<-split(dat$step,dat$inteval)
str(dat)
a<-split(dat$steps,dat$inteval)
tapply(dat$steps,dat$interval,mean)
?tapply
n <- 17; fac <- factor(rep(1:3, length = n), levels = 1:5)
table(fac)
tapply(1:n, fac, sum)
n
fac
sum(fac)
fac
levels(fac)
fac[3]
?fac
?factor
levels
a<-factor(dat$interval)
a
levels(dat$interval)
levels(dat$intervals)
levels(dat$interval)
seq(from=0,to=2355,interval=5)
b<-seq(from=0,to=2355,interval=5)
length(b)
a
levels(a)
length(levels(a))
a<-split(dat$steps,dat$inteval)
c<-split(dat$steps,dat$inteval)
c
a<-split(dat$steps,dat$inteval)
intervals<-levels(factor(dat$interval))
?split
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
g
split
dailymean<-sapply(split(dat$steps,factor(dat$interval),mean)
)
dailymean<-sapply(split(dat$steps,factor(dat$interval),mean))
dailymean<-sapply(split(dat$steps,a,mean)
dailymean<-sapply(split(dat$steps,a),mean)
split(dat$steps,a)
b<-split(dat$steps,a)
str(b)
sapply(b,sum)
b[1]
sum(b[1])
str(b[1])
mean(b[1])
mean(b[!is.na(b),1])
b[!is.na(b),1]
b[!is.na(b)]
c<-b[!is.na(b)]
c[1]
?mean
mean(b[1],na.rm=TRUE)
b[1]
mean(b[1],na.rm=TRUE)
mean(b[1])
b,1
b[,1]
b[1,]
b[1]
numeric(b[1])
as.numeric(b[1])
b$0
b`0`
b$`0`
c<-sapply(b,"[[,1)
c<-sapply(b,"[[",1)
c
c<-sapply(b[1],"[[",1)
c
b[[1]]
mean(b[[1],na.rm=TRUE)
mean(b[[1]],na.rm=TRUE)
mean(b[[1]])
mean(b[[1]],na.rm=TRUE)
c<-sapply(dat$step,a,mean,na.rm=TRUE)
c<-tapply(dat$step,a,mean,na.rm=TRUE)
c
c<-tapply(dat$step,a,mean,na.rm=TRUE)
c<-tapply(dat$step,levels(factor(dat$interval)),mean,na.rm=TRUE)
intervals=levels(factor(dat$interval))
c<-tapply(dat$step,factor(dat$interval),mean,na.rm=TRUE)
c<-tapply(dat$step,dat$interval,mean,na.rm=TRUE)
c
plot(c)
plot(c,type="l")
intervals=levels(factor(dat$interval))
dailymeanactivity<-tapply(dat$step,dat$interval,mean,na.rm=TRUE)
intervals=levels(factor(dat$interval))
plot(intervals,dailymeanactivity,type="l")
max(dailymeanactivity)
match(max(dailymeanactivity),dailymeanactivity)
intervals[104]
print(intervals[104])
length(dat[is.na(dat$steps)==TRUE,'steps')
length(dat[is.na(dat$steps)==TRUE,'steps'])
length(dat$steps)
for(i=1:5){print(i)}
for(i in 1:5){print(i)}
a<-1:5
a[1]<-4
a
datf[1,'steps']
dat[1,'steps']
dat[2,'steps']
head(dat['steps'])
length(dat$steps)
dat[17568,'steps']
dat[17569,'steps']
dat[172569,'steps']
dat[1725,'steps']
dat[1727,'steps']
dat['steps',1]
dat['steps',172569]
dat['steps',172568]
dat['steps']
dat['steps',9646]
dat[9646,'steps']
?repeat
combination
?split
?repeat
?tapply
intervalvec<-rep(intervals,length=length(dat$steps)
)
intervalvec
intervalvec[length(intervalvec)]
dailymeanvec<-rep(dailymeanactivity,length=length(dat$steps))
numNAs<-length(dat[is.na(dat$steps)==TRUE,'steps'])
datf<-dat
dailyMeanVec<-rep(dailyMeanActivity,length=length(dat$steps))
for(i in 1:length(dat$steps)){
if(is.na(datf[i,'steps'])==TRUE){
datf[i,'steps']<-dailyMeanVec[i]
}
}
dailyMeanVec<-rep(dailyMeanActivity,length=length(dat$steps))
dailyMeanActivity<-tapply(dat$step,dat$interval,mean,na.rm=TRUE)
dailyMeanVec<-rep(dailyMeanActivity,length=length(dat$steps))
for(i in 1:length(dat$steps)){
if(is.na(datf[i,'steps'])==TRUE){
datf[i,'steps']<-dailyMeanVec[i]
}
}
datf$steps
dailyMeanVec
dat$steps
datf$steps
stepsPerDayf<-sapply(split(datf$steps,datf$date),sum)
hist(stepsPerDayf)
mean(stepsPerDayf[!is.na(stepsPerDayf)])
median(stepsPerDayf[!is.na(stepsPerDayf)])
mean(stepsPerDay[!is.na(stepsPerDay)])
stepsPerDay<-sapply(split(dat$steps,dat$date),sum)
mean(stepsPerDay[!is.na(stepsPerDay)])
median(stepsPerDay[!is.na(stepsPerDay)])
abs(-5)
?weekdays
weekdays(dat[1,'date'])
dat[1,'date']
weekdays(2012-10-01)
weekdays('2012-10-01')
weekdays("2012-10-01")
weekdays("2012-10-01",abbreviate=FALSE)
weekdays(as.date(dat[1,'date'])
)
as.date
weekdays(as.Date(dat[1,'date']))
weekdays(as.Date(dat[100,'date']))
weekdays(as.Date(dat[1000,'date']))
weekdays(as.Date(dat[10000,'date']))
factor(c('Monday','Tuesday','Sunday'),levels=c('Weekday','Weekend'))
factor(c('Monday','Tuesday','Sunday'),levels='Weekday','Weekend')
factor(c('Monday','Tuesday','Sunday'),levels=c('Weekday','Weekend'))
a<-factor(c('Monday','Tuesday','Sunday'),levels=c('Weekday','Weekend'))
a$Weekend
a
a$Weekday
week<-apply(as.Date(dat$date),weekdays)
week<-tapply(as.Date(dat$date),weekdays)
week<-stapply(as.Date(dat$date),weekdays)
week<-sapply(as.Date(dat$date),weekdays)
week
week<-sapply(as.Date(dat$date),weekdays)
week<-factor(week)
week
isWeekend<-week
for(i in 1:length(week)){
if(week[i]=='Monday'| week[i]=='Tuesday'| week[i]=='Wednesday'| week[i]=='Thursday'| week[i]=='Friday'){
isWeekend[i]<-'Weekday'
} else{
isWeekend[i]<-'Weekend'
}
}
isWeekend
isWeekend<-week
for(i in 1:length(week)){
if(week[i]=='Monday'| week[i]=='Tuesday'| week[i]=='Wednesday'| week[i]=='Thursday'| week[i]=='Friday'){
isWeekend[i]<-'Weekday'
}
#else{
#isWeekend[i]<-'Weekend'
#}
}
}
isWeekend[1]
isWeekend<-week
isWeekend[1]
i<-1
if(week[i]=='Monday'| week[i]=='Tuesday'| week[i]=='Wednesday'| week[i]=='Thursday'| week[i]=='Friday'){
isWeekend[i]<-'Weekday'
}
isWeekend<-data.frame()
for(i in 1:length(week)){
if(week[i]=='Monday'| week[i]=='Tuesday'| week[i]=='Wednesday'| week[i]=='Thursday'| week[i]=='Friday'){
isWeekend[i]<-'Weekday'
}
}
?rep
isWeekend<-data.frame(c('Weekday','Weekend'),length=length(week))
for(i in 1:length(week)){
if(week[i]=='Monday'| week[i]=='Tuesday'| week[i]=='Wednesday'| week[i]=='Thursday'| week[i]=='Friday'){
isWeekend[i]<-'Weekday'
}
}
isWeekend<-data.frame(c('Weekday','Weekend'),length=length(week))
isWeekend
length(isWeekend)
isWeekend<-data.frame(rep(c('Weekday','Weekend'),length=length(week)))
isWeekend
for(i in 1:length(week)){
if(week[i]=='Monday'| week[i]=='Tuesday'| week[i]=='Wednesday'| week[i]=='Thursday'| week[i]=='Friday'){
isWeekend[i]<-'Weekday'
}
#else{
#isWeekend[i]<-'Weekend'
#}
}
isWeekend
str(isWeekend)
isWeekend[1]
isWeekend[2]
week[1]
week[5]
isWeekend<-data.frame(rep(c('Weekday','Weekend'),length=length(week)))
isWeekend[2]
isWeekend[,2]
isWeekend[2]
isWeekend
str(isWeekend)
isWeekend[1]
isWeekend[2]
isWeekend<-rep(c('Weekday','Weekend'),length=length(week))
isWeekend[1]
isWeekend[2]
isWeekend<-rep(c('Weekday','Weekend'),length=length(week))
for(i in 1:length(week)){
if(week[i]=='Monday'| week[i]=='Tuesday'| week[i]=='Wednesday'| week[i]=='Thursday'| week[i]=='Friday'){
isWeekend[i]<-'Weekday'
}
}
isWeekend
isWeekday[500]
isWeekend[500]
isWeekend[5000]
isWeekend[5500]
week[5500]
week[5000]
df<-data.frame(dat,isWeekend)
str(df)
isWeekend<-rep(c('Weekday','Weekend'),length=length(week))
for(i in 1:length(week)){
if(week[i]=='Monday'| week[i]=='Tuesday'| week[i]=='Wednesday'| week[i]=='Thursday'| week[i]=='Friday'){
isWeekend[i]<-'Weekday'
}
else{
isWeekend[i]<-'Weekend'
}
}
}
isWeekend<-rep(c('Weekday','Weekend'),length=length(week))
for(i in 1:length(week)){
if(week[i]=='Monday'| week[i]=='Tuesday'| week[i]=='Wednesday'| week[i]=='Thursday'| week[i]=='Friday'){
isWeekend[i]<-'Weekday'
}
else{
isWeekend[i]<-'Weekend'
}
}
isWeekend<-rep(c('Weekday','Weekend'),length=length(week))
for(i in 1:length(week)){
if(week[i]=='Monday'| week[i]=='Tuesday'| week[i]=='Wednesday'| week[i]=='Thursday'| week[i]=='Friday'){
isWeekend[i]<-'Weekday'
} else{
isWeekend[i]<-'Weekend'
}
}
isWeekend[5500]
isWeekend[5501]
isWeekend[5502]
week[5502]
weekdayMeanActivity<-tapply(dat[dat['isWeekend']=='Weekday','step'],dat[dat['isWeekend']=='Weekday','interval'],mean,na.rm=TRUE)
dat<-data.frame(dat,isWeekend)
weekdayMeanActivity<-tapply(dat[dat['isWeekend']=='Weekday','step'],dat[dat['isWeekend']=='Weekday','interval'],mean,na.rm=TRUE)
dat$isWeekend
weekdayMeanActivity<-tapply(dat[dat['isWeekend']=='Weekday','step'],dat[dat['isWeekend']=='Weekday','interval'],mean,na.rm=TRUE)
dat[dat["isWeekend"] == "Weekday", "step"]
dat['isWeekend']
dat['isWeekend']=='Weekday'
dat[dat["isWeekend"] == "Weekday", "steps"]
weekdayMeanActivity<-tapply(dat[dat['isWeekend']=='Weekday','steps'],dat[dat['isWeekend']=='Weekday','interval'],mean,na.rm=TRUE)
weekdayMeanActivity
plot(intervals,weekdayMeanActivity,type='l')
plot(intervals,weekendMeanActivity,type='l')
weekendMeanActivity<-tapply(dat[dat['isWeekend']=='Weekend','steps'],dat[dat['isWeekend']=='Weekend','interval'],mean,na.rm=TRUE)
plot(intervals,weekendMeanActivity,type='l')
par(mfrow=c(2,1))
plot(intervals,weekdayMeanActivity,type='l')
plot(intervals,weekendMeanActivity,type='l')
par(mfrow=c(2,1))
plot(intervals,weekdayMeanActivity,type='l',main='Weekday')
plot(intervals,weekendMeanActivity,type='l',main='Weekend')
stepsPerDay<-sapply(split(dat$steps,dat$date),sum)
hist(stepsPerDay)
knit2html()
library(knitr)
knit2html('PA1_template.Rmd')
library(httr)
# 1. Find OAuth settings for github:
# http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
# Use any URL you would like for the homepage URL (http://github.com is fine)
# and http://localhost:1410 as the callback url
#
# Insert your client ID and secret below - if secret is omitted, it will
# look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
install.packages("httr")
oauth_endpoints("github")
install.package('sqldf')
install.packages('sqldf')
install.packages("sqldf")
